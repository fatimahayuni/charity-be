const express = require('express');
const router = express.Router();
const cartService = require('../services/cartService');
const authenticateToken = require('../middleware/UserAuth')
const pool = require('../database'); // Import the pool from db.js



// Apply the authenticateToken middleware to all routes
router.use(authenticateToken);

// GET cart contents
router.get('/', async (req, res) => {

    try {
        const cartContents = await cartService.getCartContents(req.user.userId);

        res.json(cartContents);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// PUT bulk update cart
router.put('/', async (req, res) => {
    console.log("inside cart.js before try block.")
    try {
        const cartItems = req.body.cartItems;
        await cartService.updateCart(req.user.userId, cartItems);
        res.json({ message: 'Cart updated successfully' });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// POST request to add a new item to the cart
router.post('/', async (req, res) => {
    console.log('Received data for cart item:', req.body); // Log the data received in the request body

    const { campaign_id, donation_amount, pledge_id, added_at } = req.body;
    const user_id = req.user.userId;  // This will come from the authenticated user
    try {
        // Insert the new cart item into the database
        const query = `
            INSERT INTO cart_items (user_id, campaign_id, pledge_id, added_at, donation_amount)
            VALUES (?, ?, ?, ?, ?)
        `;

        const values = [user_id, campaign_id, pledge_id, added_at, donation_amount];

        // Execute the query
        pool.execute(query, values, (err, result) => {
            if (err) {
                console.error('Error inserting into cart_items:', err);
                return res.status(500).json({ error: 'Failed to add item to cart' });
            }

            // Send the newly inserted item, including the unique ID generated by MySQL
            res.status(201).json({
                id: result.insertId,  // `insertId` contains the ID of the newly inserted row
                user_id,
                campaign_id,
                pledge_id,
                added_at,
                donation_amount
            });
        });
    } catch (error) {
        console.error('Error adding to cart:', error);
        res.status(500).json({ error: 'Server error, could not add item to cart' });
    }
});

// DELETE a specific item from the cart by its ID
router.delete('/:id', async (req, res) => {
    const { id } = req.params;  // Get the `id` from the request parameters
    const user_id = req.user.userId;

    try {
        // Perform the delete operation in the database
        const query = `
            DELETE FROM cart_items
            WHERE id = ? AND user_id = ?
        `;

        const values = [id, user_id];

        pool.execute(query, values, (err, result) => {
            if (err) {
                console.error('Error deleting item from cart:', err);
                return res.status(500).json({ error: 'Failed to remove item from cart' });
            }

            if (result.affectedRows === 0) {
                return res.status(404).json({ message: 'Item not found in cart' });
            }

            // Successfully removed the item
            res.json({ message: `Item with id ${id} removed from cart.` });
        });
    } catch (error) {
        console.error('Error removing from cart:', error);
        res.status(500).json({ error: 'Server error, could not remove item from cart' });
    }
});


module.exports = router;